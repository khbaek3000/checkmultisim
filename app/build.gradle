apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.checkdualsim"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /** android support */
    implementation "androidx.legacy:legacy-support-v4:${supportLibVersion}"
    implementation "androidx.appcompat:appcompat:${supportLibVersion}"
    implementation "androidx.recyclerview:recyclerview:${supportLibVersion}"
    implementation "androidx.cardview:cardview:${supportLibVersion}"
    implementation "com.google.android.material:material:1.0.0-rc01"
    implementation "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}"

    /** multidex */
    implementation "androidx.multidex:multidex:${multidexVersion}"
    testImplementation "androidx.arch.core:core-testing:${archCoreVersion}"

    // Core library
    androidTestImplementation 'androidx.test:core:1.0.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    testImplementation 'junit:junit:4.12'

    testImplementation 'org.assertj:assertj-core:3.6.2'
    testImplementation("com.squareup.okhttp3:mockwebserver:3.12.0")

    testImplementation 'org.mockito:mockito-core:2.8.0'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC2'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.0'
    testImplementation 'org.powermock:powermock-core:1.7.0'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.0'

    /** ui 테스트를 위해 추가 */
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0-alpha03'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0-alpha03'

    /** Architecture Component */
    // view model
    implementation "androidx.lifecycle:lifecycle-runtime:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-extensions:${lifecycleVersion}"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:${lifecycleVersion}"

    // database
    implementation "androidx.room:room-runtime:${roomVersion}"
    implementation "androidx.room:room-rxjava2:${roomVersion}"
    annotationProcessor "androidx.room:room-compiler:${roomVersion}"

    /** Dagger */
    implementation "com.google.dagger:dagger:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-android-processor:${daggerVersion}"
    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"

//    testAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
//    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    /** Rx */
    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"

    /** Network */
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttpLoggingInterceptorVersion}"

    /** Json Parsing */
    implementation "com.google.code.gson:gson:${gsonVersion}"

    /** QR Open Source */
    implementation "com.journeyapps:zxing-android-embedded:${zxingAndroidVersion}"
    implementation "com.google.zxing:core:${zxingCoreVersion}"

    /** base32 codec */
    implementation "commons-codec:commons-codec:${commonsCodecVersion}"

    /** font */
    implementation "uk.co.chrisjenx:calligraphy:${calligraphyVersion}"

    /** logger */
    implementation "com.jakewharton.timber:timber:${timberVersion}"

    /** crashlytics */
//    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
////        transitive = true
////    }

    /** flexbox - 뷰의 유연한 정렬을 위해 사용(니모닉 검증) 1.1.0 버전이 있으나 androidX부터 지원이라 1.0.0버전 사용  */
    implementation "com.google.android:flexbox:${flexboxVersion}"

//    implementation 'com.github.bumptech.glide:glide:4.8.0'
//    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'

    /** 날짜 계산 LocalDateTime(낮은 API에서 사용가능) */
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.1'
    testImplementation 'org.threeten:threetenbp:1.3.1'

//    /** Google Analytics 관련 */
//    //implementation 'com.google.firebase:firebase-core:16.0.7'
//    implementation 'com.google.firebase:firebase-core:16.0.7'
//
//    /** Firebase Dynamic Links **/
//    implementation 'com.google.firebase:firebase-dynamic-links:16.1.8'
}
